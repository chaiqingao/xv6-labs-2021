1. RISC-V assembly
Q: Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?
A: a0-a7. a2.

Q: Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)
A: no. no.

Q: At what address is the function printf located?
A: 0x630

Q: What value is in the register ra just after the jalr to printf in main?
A: 0x38

Q: Run the following code.
	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
What is the output? Here's an ASCII table that maps bytes to characters.
The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?
Here's a description of little- and big-endian and a more whimsical description.
A: HE110 World

Q: In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?
	printf("x=%d y=%d", 3);
A: printf will call vprintf to print the variables, vprintf will use the macro va_arg to get the arguments and it does not check the end of the argument list, so it will read an undefined variable from an unused space.
